from machine import Pin
import time
import math
import framebuf
from tvout import TVOut

PIN_H = Pin(47)
PIN_L = Pin(48)

tv = TVOut(PIN_L, PIN_H)

# Text demo
tv.fill(0)
tv.text("hello", 10, 5, 255)
tv.text("from TVOut", 10, 15, 255)
tv.text("on ESP32-S3", 10, 25, 255)
tv.text("running", 10, 35, 255)
tv.text("micropython", 10, 45, 255)
tv.show()

time.sleep(10)

# Lines demo
tv.fill(0)
for i in range(0, tv.width-10, 8):
    tv.line(0, 10+i, i, tv.height-1, 255)
    tv.line(tv.width-1, tv.height-1-(10+i), tv.width-1-i, 0, 255)
tv.show()

time.sleep(10)

# Sine and cosine demo
tv.fill(0)
tv.hline(0, int(tv.height/2), tv.width-1, 255)    
for x in range(0, tv.width):
    phase = math.radians(361*x/tv.width)
    y1 = int(tv.height/2-(math.sin(phase))*30)
    tv.pixel(x, y1, 255)
    y2 = int(tv.height/2-(math.cos(phase))*30)
    tv.pixel(x, y2, 255)
tv.show()

time.sleep(10)

# Bitmap demo
test_image = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 
        0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
        0x70, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
        0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xf8, 
        0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 
        0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xf8, 0x07, 0x00, 0x00, 0x20, 0x3f, 
        0x00, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x30, 0x3f, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 
        0x30, 0x3f, 0x00, 0x00, 0x00, 0xe1, 0x1f, 0x00, 0x00, 0x70, 0x3f, 0x00, 0x00, 0x00, 0xc2, 0x3f, 
        0x00, 0x00, 0x70, 0x3f, 0x00, 0x00, 0x00, 0x86, 0xff, 0x00, 0x00, 0x78, 0x3f, 0x00, 0x00, 0x00, 
        0x1e, 0xff, 0x01, 0x00, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x3c, 0xfe, 0x03, 0x00, 0xf0, 0x3e, 0x00, 
        0x00, 0x00, 0xfc, 0xfc, 0x0f, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0xf8, 0xfb, 0x1f, 0x00, 0xf3, 
        0x7f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0xf3, 0x7f, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 
        0x00, 0xe7, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 
        0xff, 0xff, 0x07, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x18, 0xfc, 0xff, 0x1f, 0xfc, 0xff, 0x00, 0x00, 
        0x00, 0x78, 0xf0, 0xff, 0x3f, 0xf0, 0xff, 0x01, 0x20, 0x00, 0xf0, 0xf3, 0xff, 0xff, 0xf0, 0xff, 
        0x00, 0x60, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xe1, 0x3f, 0x00, 0x60, 0x18, 0xe0, 0xff, 0xff, 0xff, 
        0xc3, 0x1f, 0x3e, 0x60, 0x1c, 0xc0, 0xff, 0xff, 0xff, 0x87, 0x8f, 0x7f, 0x60, 0x0e, 0x00, 0xff, 
        0xff, 0xff, 0x8f, 0xc7, 0x67, 0x40, 0x0e, 0x00, 0xfe, 0xff, 0xff, 0x1f, 0xe3, 0x7f, 0x00, 0x06, 
        0x00, 0x80, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0x10, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0xf8, 0x1f, 
        0x30, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x7f, 0xfc, 0x0f, 0x30, 0x18, 0x00, 0xf8, 0xff, 0xff, 0xff, 
        0xfc, 0x0f, 0x70, 0x1c, 0x00, 0xe0, 0xdf, 0xff, 0xff, 0xfd, 0x07, 0x70, 0x0e, 0x00, 0x00, 0xe0, 
        0xff, 0xff, 0xf9, 0x07, 0x60, 0x06, 0x00, 0x00, 0xf8, 0xf7, 0xff, 0xfb, 0x07, 0x60, 0x03, 0x00, 
        0xc0, 0xff, 0xf9, 0xff, 0xfb, 0x03, 0x01, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0xff, 0xff, 0x03, 0x01, 
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xdf, 0xff, 0xff, 
        0x03, 0x23, 0x00, 0x00, 0x00, 0xe0, 0xc1, 0xff, 0xff, 0x01, 0x07, 0x0e, 0x00, 0x00, 0x00, 0xe0, 
        0xff, 0xff, 0x01, 0x97, 0x07, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0x20, 0xf2, 0x03, 0x00, 0x00, 
        0x00, 0xf0, 0xff, 0xff, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x7f, 0x60, 0x04, 0x00, 
        0x00, 0x00, 0x00, 0xfc, 0xff, 0x7f, 0x60, 0x04, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x60, 
        0x02, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x40, 0xf2, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 
        0x07, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x03, 0x80, 0x1f, 0x00, 0x00, 0x00, 0xe0, 
        0xff, 0x3f, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x07, 0x00, 0x20, 0x00, 0x00, 0x00, 
        0x00, 0xfc, 0xff, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x04, 0x00, 
        0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x7f, 0x00, 0xc0, 
        0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 
        0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
        0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x78, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x0f, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0xe7, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x0e, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ]
test_image_width = 70
test_image_height = 70

tv.fill(0)
img_buf = framebuf.FrameBuffer(bytearray(test_image), test_image_width, test_image_height, framebuf.MONO_HMSB)
tv.blit(img_buf, int((tv.width-test_image_width)/2), int((tv.height-test_image_height)/2))
tv.show()

